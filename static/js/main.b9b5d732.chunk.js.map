{"version":3,"sources":["components/MagicGrid/MagicGrid.module.css","components/MagicElement/MagicElement.module.css","components/GameBoard/GameBoard.module.css","services/DataExpert.service.ts","components/MagicElement/MagicElement.tsx","components/MagicGrid/MagicGrid.tsx","components/GameBoard/GameBoard.service.ts","components/GameBoard/GameBoard.tsx","components/GameBoard/GameBoard.constants.ts","App.tsx","App.constants.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","DataExpert","state","key","Math","random","toString","matrix","map","row","rowIndex","elemIndex","createDataElement","size","push","columnIndex","round","first","second","some","firstRow","element","MagicElement","props","className","classNames","styles","MagicElement_filled","React","memo","MagicGrid","data","useState","keyArray","setKeyArray","useEffect","length","keys","Array","fill","index","MagicGrid__row","elem","GameBoardService","item","getNextState","count","aliveNeighborsCount","getAliveNeighborsCount","GameBoard","setData","intervalIndex","setInterval","prev","current","nextTick","isSameData","clearInterval","App","randomMatrix","generateData","randomData","composeData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9b5d732.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MagicGrid\":\"MagicGrid_MagicGrid__1SF50\",\"MagicGrid__row\":\"MagicGrid_MagicGrid__row__3Ta13\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MagicElement\":\"MagicElement_MagicElement__1W1rI\",\"MagicElement_filled\":\"MagicElement_MagicElement_filled__wqG5B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameBoard\":\"GameBoard_GameBoard__1JG1y\"};","import { IMagicElement } from \"../components/MagicGrid/MagicGrid.types\";\r\n\r\nexport class DataExpert {\r\n  public static createDataElement(state: boolean): IMagicElement {\r\n    return { state, key: Math.random().toString() } as IMagicElement\r\n  }\r\n  public static composeData(matrix: boolean[][]): IMagicElement[][] {\r\n    return matrix.map((row, rowIndex) =>\r\n      row.map((state, elemIndex) => (DataExpert.createDataElement(state)))\r\n    )\r\n  }\r\n  public static generateData(size: number): boolean[][] {\r\n    let matrix: boolean[][] = [];\r\n    for (let rowIndex = 0; rowIndex < size; rowIndex++) {\r\n      matrix.push([]);\r\n      for (let columnIndex = 0; columnIndex < size; columnIndex++) {\r\n        matrix[rowIndex].push(Math.round(Math.random()) as unknown as boolean);\r\n      }\r\n    }\r\n    return matrix;\r\n  }\r\n  public static isSameData(first: IMagicElement[][], second: IMagicElement[][]): boolean {\r\n    return !first.some((firstRow, rowIndex) => {\r\n      return firstRow.some((element, columnIndex) => {\r\n        return element !== second[rowIndex][columnIndex]\r\n      })\r\n    });\r\n  }\r\n}\r\n\r\nexport default DataExpert;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { IMagicElement } from '../MagicGrid/MagicGrid.types';\r\nimport styles from './MagicElement.module.css';\r\n\r\nconst MagicElement = (props: IMagicElement) => {\r\n  const { state } = props;\r\n  const className = classNames(styles.MagicElement, {\r\n    [styles.MagicElement_filled]: state\r\n  });\r\n\r\n  return <div className={className} data-testid=\"MagicElement\"></div>;\r\n}\r\n\r\nexport default React.memo(MagicElement);\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport styles from './MagicGrid.module.css';\r\nimport { IMagicElement, IMagicGridProps } from './MagicGrid.types';\r\nimport MagicElement from '../MagicElement/MagicElement';\r\n\r\nconst MagicGrid = (props: IMagicGridProps<IMagicElement>) => {\r\n  const { data } = props;\r\n  const [keyArray, setKeyArray] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const keys = Array(data.length).fill(0).map(() => Math.random().toString());\r\n      setKeyArray(keys)\r\n    }\r\n  }, [data.length])\r\n\r\n  return <div className={styles.MagicGrid} data-testid=\"MagicGrid\">\r\n    {keyArray.length && data.map((row, index) =>\r\n      <div className={styles.MagicGrid__row} key={keyArray[index]}>\r\n        {row.map(elem =>\r\n          <MagicElement {...elem} />\r\n        )}\r\n      </div>\r\n    )}\r\n  </div>\r\n};\r\n\r\nexport default React.memo(MagicGrid);\r\n","import DataExpert from \"../../services/DataExpert.service\";\r\nimport { IMagicElement } from \"../MagicGrid/MagicGrid.types\";\r\n\r\nexport class GameBoardService {\r\n    public static nextTick(data: IMagicElement[][]): IMagicElement[][] {\r\n        return data.map((row, rowIndex) => row.map((item, columnIndex) => GameBoardService.getNextState(data, rowIndex, columnIndex)))\r\n    }\r\n\r\n    /** count of alive (1-9)/(N)eighbors (E)lement\r\n     * 1|2|3\r\n     * 4|E|6\r\n     * 7|8|9\r\n     */\r\n    public static getAliveNeighborsCount(data: IMagicElement[][], rowIndex: number, columnIndex: number): number {\r\n        let count = 0;\r\n        if (rowIndex - 1 >= 0 && columnIndex - 1 >= 0 && data[rowIndex - 1][columnIndex - 1].state) {//1\r\n            count++;\r\n        }\r\n        if (rowIndex - 1 >= 0 && data[rowIndex - 1][columnIndex].state) {//2\r\n            count++;\r\n        }\r\n        if (rowIndex - 1 >= 0 && columnIndex + 1 < data[rowIndex].length && data[rowIndex - 1][columnIndex + 1].state) {//3\r\n            count++;\r\n        }\r\n        if (columnIndex - 1 >= 0 && data[rowIndex][columnIndex - 1].state) {//4\r\n            count++;\r\n        }\r\n        if (columnIndex + 1 < data[rowIndex].length && data[rowIndex][columnIndex + 1].state) {//6\r\n            count++;\r\n        }\r\n        if (rowIndex + 1 < data.length && columnIndex - 1 >= 0 && data[rowIndex + 1][columnIndex - 1].state) {//7\r\n            count++;\r\n        }\r\n        if (rowIndex + 1 < data.length && data[rowIndex + 1][columnIndex].state) {//8\r\n            count++;\r\n        }\r\n        if (rowIndex + 1 < data.length && columnIndex + 1 < data[rowIndex].length && data[rowIndex + 1][columnIndex + 1].state) {//9\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /** get next state of (E)lement by his (N)eighbors\r\n     * N|N|N\r\n     * N|E|N\r\n     * N|N|N\r\n     */\r\n    public static getNextState(data: IMagicElement[][], rowIndex: number, columnIndex: number): IMagicElement {\r\n        const aliveNeighborsCount = GameBoardService.getAliveNeighborsCount(data, rowIndex, columnIndex)\r\n        if (data[rowIndex][columnIndex].state && (aliveNeighborsCount === 2 || aliveNeighborsCount === 3)) {\r\n            return data[rowIndex][columnIndex]\r\n        }\r\n        if (!data[rowIndex][columnIndex].state && aliveNeighborsCount === 3) {\r\n            return DataExpert.createDataElement(true)\r\n        }\r\n        if (data[rowIndex][columnIndex].state) {\r\n            return DataExpert.createDataElement(false)\r\n        } else {\r\n            return data[rowIndex][columnIndex]\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameBoardService;\r\n","import React, { useEffect, useState } from 'react';\r\nimport DataExpert from '../../services/DataExpert.service';\r\n\r\nimport MagicGrid from '../MagicGrid/MagicGrid';\r\nimport { IMagicElement, IMagicGridProps } from '../MagicGrid/MagicGrid.types';\r\n\r\nimport { DEFAULT_TICK } from './GameBoard.constants';\r\nimport styles from './GameBoard.module.css';\r\nimport { GameBoardService } from './GameBoard.service';\r\n\r\nconst GameBoard = (props: IMagicGridProps<IMagicElement>) => {\r\n  const [data, setData] = useState(props.data);\r\n\r\n  useEffect(() => {\r\n    const intervalIndex = setInterval(() => {\r\n      setData((prev) => {\r\n        const current = GameBoardService.nextTick(prev);\r\n        const isSame = DataExpert.isSameData(prev, current);\r\n        if (isSame) {\r\n          clearInterval(intervalIndex);\r\n        }\r\n        return current\r\n      });\r\n    }, DEFAULT_TICK);\r\n\r\n    return () => clearInterval(intervalIndex);\r\n  }, [])\r\n\r\n  return <div className={styles.GameBoard} data-testid=\"GameBoard\">\r\n    <MagicGrid data={data} />\r\n  </div>\r\n};\r\n\r\nexport default GameBoard;\r\n","export const DEFAULT_TICK = 200;","import React from 'react';\r\n\r\nimport GameBoard from './components/GameBoard/GameBoard';\r\nimport DataExpert from './services/DataExpert.service';\r\n// import { mockedMagicGridProps, mockedMagicGridPropsMap } from './testData/MagicGrid.mocked';\r\n\r\nimport { DEFAULT_SIZE, LOADING_TEXT } from './App.constants';\r\nimport './App.css';\r\n\r\nfunction App(props: { size?: number }) {\r\n  const { size = DEFAULT_SIZE } = props;\r\n  const randomMatrix = DataExpert.generateData(size);\r\n  const randomData = DataExpert.composeData(randomMatrix);\r\n\r\n  // const mockedData = mockedMagicGridProps;\r\n  // const mockedData = mockedMagicGridPropsMap.get(\"tetris\");\r\n  return (\r\n    <div className=\"App\">\r\n      {randomData && <GameBoard {...{ data: randomData }} />}\r\n      {!randomData?.length && <p>{LOADING_TEXT}</p>}\r\n      {/* <br />\r\n      {mockedData && <GameBoard {...mockedData} />} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const LOADING_TEXT = \"Loading...\";\r\nexport const DEFAULT_SIZE = 50;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}